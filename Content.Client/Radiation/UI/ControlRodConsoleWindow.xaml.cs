using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Content.Client.Message;
using Content.Shared.Radiation.Components;
using Robust.Client.UserInterface.Controls;
using Robust.Shared.Maths;
using static Robust.Client.UserInterface.Controls.BoxContainer;
namespace Content.Client.Radiation.UI
{
    [GenerateTypedNameReferences]
    public partial class ControlRodConsoleWindow : DefaultWindow
    {
        public event Action<BaseButton.ButtonEventArgs, RodButton>? OnUiButtonPressed;
        public ControlRodConsoleWindow()
        {
            IoCManager.InjectDependencies(this);
            RobustXamlLoader.Load(this);
        }
        private ControlRodConsoleBoundUserInterfaceState? _lastUpdate;
        public void Populate(ControlRodConsoleBoundUserInterfaceState state)
        {
            _lastUpdate = state;
            ControlRods.Children.Clear();
            if (state.ControlRodInfos.Count > 0) {
                var sButton = new RodButton(null, UiButton.Stop, "ALL STOP");
                sButton.OnPressed += args => OnUiButtonPressed?.Invoke(args, sButton);
                var eButton = new RodButton(null, UiButton.Emergency, "SCRAM");
                eButton.OnPressed += args => OnUiButtonPressed?.Invoke(args, eButton);
                var emergencyRow = new BoxContainer
                {
                    Orientation = LayoutOrientation.Horizontal,
                    Children =
                    {
                        eButton,
                        sButton
                    }
                };
                ControlRods.Children.Add(emergencyRow);
                foreach (var controlRodInfo in state.ControlRodInfos)
                {
                    if (controlRodInfo.InRange)
                    {
                        var rodPercent = (1-controlRodInfo.Extension).ToString("0%"); //TODO use max ext instead of just multiplying by 100
                        var label = new Label
                        {
                            Text = "NO. " + controlRodInfo.Rod.ToString() + ": " + rodPercent, //TODO loc
                            MinSize = new Vector2(300,0)
                        };
                        var extendButton = new RodButton(controlRodInfo.Rod, UiButton.Extend, "-");
                        extendButton.OnPressed += args => OnUiButtonPressed?.Invoke(args, extendButton);
                        var retractButton = new RodButton(controlRodInfo.Rod, UiButton.Retract, "+");
                        retractButton.OnPressed += args => OnUiButtonPressed?.Invoke(args, retractButton);
                        var stopButton = new RodButton(controlRodInfo.Rod, UiButton.Stop, "STOP");
                        stopButton.OnPressed += args => OnUiButtonPressed?.Invoke(args, stopButton);
                        var rodRow = new BoxContainer
                        {
                            Orientation = LayoutOrientation.Horizontal,
                            Children =
                            {
                                label,
                                extendButton,
                                retractButton,
                                stopButton
                            }
                        };
                        ControlRods.Children.Add(rodRow);
                    }
                }
            } else {
                var label = new Label
                {
                    Text = "No Control Rods Configured" //TODO loc
                };
                ControlRods.Children.Add(label);
            }
        }
    }
    public sealed class RodButton : Button
    {
        public EntityUid? Rod { get; }
        public UiButton Function { get; }
        public RodButton(EntityUid? rod, UiButton function, string text)
        {
            Rod = rod;
            Function = function;
            Text = text;
        }
    }
}
